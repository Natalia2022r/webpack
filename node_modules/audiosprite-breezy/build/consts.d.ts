declare type AudioFormat = 'aiff' | 'wav' | 'ac3' | 'mp3' | 'mp4' | 'm4a' | 'ogg' | 'opus' | 'webm';
declare type AudioFormatOptions = string[];
declare type Export = Record<AudioFormat, AudioFormatOptions>;
declare type Logger = {
    debug: Function;
    info: Function;
    log: Function;
};
declare type Options = {
    output: string; /** @param output Name for the output files */
    path: string;
    export: Array<AudioFormat>;
    format: 'howler' | 'howler2' | 'createjs' | 'default';
    autoplay: string;
    loop: Array<string>;
    silence: number;
    gap: number;
    minlength: number;
    bitrate: number;
    vbr: number;
    'vbr:vorbis': number;
    samplerate: number;
    channels: 1 | 2;
    rawparts: Array<AudioFormat>;
    ignorerounding: 0 | 1;
    logger: Logger;
};
declare type DefaultOutput = {
    resources: Array<string>;
    spritemap: {
        [key: string]: {
            start: number;
            end: number;
            loop: boolean;
        };
    };
    autoplay?: string;
};
declare type HowlerSprite = {
    [key: string]: [number, number, boolean?];
};
declare type CreateJSSprite = {
    id: string;
    startTime: number;
    duration: number;
};
declare type HowlerOutput = {
    urls: Array<string>;
    sprite: HowlerSprite;
};
declare type Howler2Output = {
    src: Array<string>;
    sprite: HowlerSprite;
};
declare type CreateJSOutput = {
    src: string;
    data: {
        audioSprite: Array<CreateJSSprite>;
    };
};
export type { Options, Logger, DefaultOutput, HowlerOutput, Howler2Output, CreateJSOutput, HowlerSprite, CreateJSSprite, Export, AudioFormat, AudioFormatOptions, };
declare const defaultsOptions: Options;
export default defaultsOptions;
